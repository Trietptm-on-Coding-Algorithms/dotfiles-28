#!/usr/bin/env bash
#
# Defines functions for `dotfiles test`.

ERR=0
export ERR

########################################
# Runs ShellCheck to lint shell scripts.
########################################
run_shellcheck() {
  if ! is_exists "shellcheck"; then
    e_warning "ShellCheck is not installed."
    return 1
  fi

  files=()
  files+=(${DOTFILES_PATH}/bin/*)
  files+=(${DOTFILES_PATH}/lib/*)

  e_arrow "Run ShellCheck"

  for i in "${files[@]}"; do
    shellcheck "$i"
    if is_success; then
      e_success "$i" | e_indent
    else
      ERR=1
      e_error "$i" | e_indent
    fi
  done
}

########################################
# Tests whether dotfiles are deployed correctly.
########################################
test_deploy() {
  e_arrow "Deploy dotfiles"

  cd "$DOTFILES_PATH"

  bin/dotfiles deploy >/dev/null

  if is_success; then
    e_success "Passed." | e_indent
  else
    ERR=1
    e_error "Failded." | e_indent
  fi
}

########################################
# Tests whether dotfiles are linked correctly.
########################################
test_links() {
  e_arrow "Test dotfiles links"

  cd "$DOTFILES_PATH/src"

  for i in $(find . -type f | sed 's/.\///'); do
    if [ "$(readlink "$HOME/$i")" = "$DOTFILES_PATH/src/$i" ]; then
      e_success "$i" | e_indent
    else
      ERR=1
      e_error "$i" | e_indent
    fi
  done
}

########################################
# Emulates GNU readlink -f option.
########################################
readlink() {
  if [ $# -eq 0 ]; then
    return 1
  fi

  local file phys default

  # Change directory and reset file.
  file="$1"
  cd "$(dirname "$file")"
  file="$(basename "$file")"

  # Readlink recursively.
  while [ -L "$file" ]; do
    file="$(command readlink "$file")"
    cd "$(dirname "$file")"
    file="$(basename "$file")"
  done

  # Get read pwd.
  phys="$(pwd -P)"
  result="$phys/$file"

  # Returns result
  echo "$result"
}

########################################
# Tests dotfiles and checks shell scripts.
########################################
test_dotfiles() {
  # Exit if dotfiles is not exist.
  if [ ! -d "$DOTFILES_PATH" ]; then
    die "Dotfiles not found."
  fi

  e_header "Test dotfiles."

  # Run test tasks.
  run_shellcheck
  test_deploy
  test_links

  if [ "$ERR" -eq 1 ]; then
    e_error "Test failed."
    exit 1
  else
    e_success "All test tasks passed."
    exit 0
  fi
}
