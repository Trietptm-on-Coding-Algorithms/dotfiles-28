#!/bin/bash
#
# A simple script to backup a user's GitHub repositories and gists.
# This script is forked from https://gist.github.com/darktim/5582423.

GHBU_USERNAME=${GHBU_USERNAME:-''}
GHBU_PASSWORD=${GHBU_PASSWORD:-''}
GHBU_BACKUP_DIR=${GHBU_BACKUP_DIR:-"${HOME}/github-backups"}
GHBU_PRUNE_OLD_DAYS=${GHBU_PRUNE_OLD_DAYS:-'7'}
GHBU_USE_HTTPS=${GHBU_USE_HTTPS:-false}
GHBU_QUIET=${GHBU_QUIET:-false}
GHBU_DRY_RUN=${GHBU_DRY_RUN:-false}

GHBU_REPO_HOST=${GHBU_REPO_HOST:-'github.com'}
GHBU_GIST_HOST=${GHBU_GIST_HOST:-'gist.github.com'}
GHBU_API_URL=${GHBU_API_URL:-'https://api.github.com'}

CURL_AUTH=''
TIMESTAMP="$(date "+%y%m%d-%H%M%S")"

#######################################
# Prints help message.
#######################################
run_help() {
cat <<EOS
A simple script to backup a user's GitHub repositories and gists.

Usage: $(basename "${0}") [options]

Options:
  -h, --help        Print this help message.
  -q, --quiet       Suppress console output.
  -D, --dry         Run without cloning Git repositories.
  -H, --use-https   Use HTTPS protocol instead of SSH to clone Git repositories.

  -u, --username <username>
      (Required) Specify your GitHub username.
  -p, --password <password>
      (Required for private repositories) Specify your GitHub password.
      If you have enabled two-factor authentication for your GitHub account,
      use Personal Access Token instead.
  -d, --dir <dir>
      Specify where to save backup files.
      Default directory is '${GHBU_BACKUP_DIR}'
  -r, --prune <days>
      Delete backup files older then N days automatically.
      Set to 0 to disable auto pruning. Default value is ${GHBU_PRUNE_OLD_DAYS} day(s).
EOS
}

#######################################
# Fetches GitHub repository or gist
# list using GitHub API.
#######################################
fetch_list() {
  local result=''
  local pending=''
  local page=0

  while true; do
    let page++
    pending="$(request_api "users/${GHBU_USERNAME}/${1}?page=${page}&per_page=90" \
      | grep "\"${2}\"" \
      | awk -F': "' '{print $2}' \
      | sed -e 's/",//g')"
    if [[ -z "${pending}" ]]; then
      break
    fi
    result="${result} ${pending}"
  done

  echo "${result}"
}

#######################################
# Creates an archive file from a Git
# repository.
#######################################
archive_git() {
  git clone --quiet --mirror "${1}" "${2}" 2>/dev/null && tgz "${2}"
}

#######################################
# Creates an archive file from GitHub
# API.
#######################################
archive_api() {
  request_api "${1}" > "${2}" && tgz "${2}"
}

#######################################
# Creates a gzipped tar archive of the
# specified folder and then deletes
# the sources.
#######################################
tgz() {
  tar zcPf "${1}.tar.gz" "${1}" && rm -rf "${1}"
}

#######################################
# Requests data from GitHub API.
#######################################
request_api() {
  curl -q -s "${CURL_AUTH}" "${GHBU_API_URL}/${1}" -H 'Accept: application/vnd.github.v3.html+json'
}

#######################################
# Tests whether the string is a valid
# argument.
#######################################
is_arg() {
  if [[ -z "${1}" ]] || [[ "${1}" =~ ^-+ ]]; then
    return 1
  fi
  return 0
}

#######################################
# The main program.
#######################################
main() {
  local repo_clone_url=''
  local gist_clone_url=''
  local repo_list=''
  local gist_list=''

  # Test for all known flags.
  for opt in "$@"; do
    case "${opt}" in
      '-h'|'--help')      run_help; exit             ;;
      '-q'|'--quiet')     GHBU_QUIET=true; shift     ;;
      '-D'|'--dry')       GHBU_DRY_RUN=true; shift   ;;
      '-H'|'--use-https') GHBU_USE_HTTPS=true; shift ;;
      '-u'|'--username')
        if is_arg "${2}"; then GHBU_USERNAME="${2}"; shift 2; else shift; fi
        ;;
      '-p'|'--password')
        if is_arg "${2}"; then GHBU_PASSWORD="${2}"; shift 2; else shift; fi
        ;;
      '-d'|'--dir')
        if is_arg "${2}"; then GHBU_BACKUP_DIR="${2}"; shift 2; else shift; fi
        ;;
      '-r'|'--prune')
        if is_arg "${2}"; then GHBU_PRUNE_OLD_DAYS="${2}"; shift 2; else shift; fi
        ;;
    esac
  done

  # Exit this script if GitHub username is not specified.
  if [[ -z "${GHBU_USERNAME}" ]]; then
    $GHBU_QUIET || echo 'Please specified your GitHub username. (--username)' 1>&2
    exit 1
  fi

  # Print a dry run notice.
  if $GHBU_DRY_RUN; then
    $GHBU_QUIET || echo 'NOTE: This is a dry run.'
  fi

  # Create a backup directory if not exist and then enter it.
  $GHBU_DRY_RUN || mkdir -p "${GHBU_BACKUP_DIR}"
  $GHBU_DRY_RUN || cd "${GHBU_BACKUP_DIR}" || exit 1

  # Set cURL user authentication string if password is specified.
  if [[ -n "${GHBU_PASSWORD}" ]]; then
    CURL_AUTH="-u ${GHBU_USERNAME}:${GHBU_PASSWORD}"
  else
    $GHBU_QUIET || echo 'Password or Personal Access Token is not specified. (--password)'
    $GHBU_QUIET || echo 'Backup only public repositories and gists.'
  fi

  # Set Git clone URL.
  if $GHBU_USE_HTTPS; then
    $GHBU_QUIET || echo 'Use HTTPS protocol to clone Git repositories.'
    repo_clone_url="https://${GHBU_REPO_HOST}/"
    gist_clone_url="https://${GHBU_GIST_HOST}/"
  else
    $GHBU_QUIET || echo 'Use SSH protocol to clone Git repositories.'
    repo_clone_url="git@${GHBU_REPO_HOST}:"
    gist_clone_url="git@${GHBU_GIST_HOST}:"
  fi

  # Fetch GitHub repository and gist list.
  $GHBU_QUIET || echo 'Fetching GitHub repository list...'
  repo_list="$(fetch_list 'repos' 'name')"
  $GHBU_QUIET || echo "Found $(echo "${repo_list}" | wc -w) GitHub repository(ies)."

  $GHBU_QUIET || echo 'Fetching gist list...'
  gist_list="$(fetch_list 'gists' 'id')"
  $GHBU_QUIET || echo "Found $(echo "${gist_list}" | wc -w) gist(s)."

  # Backup GitHub repositories.
  for repo in ${repo_list}; do
    local name="${GHBU_USERNAME}/${repo}"
    $GHBU_QUIET || echo "Backup '${name}'..."
    $GHBU_DRY_RUN || archive_git "${repo_clone_url}${name}.git" "${name////-}-${TIMESTAMP}.git"
    $GHBU_QUIET || echo "Backup '${name}' wiki (if any)..."
    $GHBU_DRY_RUN || archive_git "${repo_clone_url}${name}.wiki.git" "${name////-}.wiki-${TIMESTAMP}.git"
    $GHBU_QUIET || echo "Backup '${name}' issues..."
    $GHBU_DRY_RUN || archive_api "repos/${name}/issues" "${name////-}.issues-${TIMESTAMP}.json"
  done

  # Backup gists.
  for gist in ${gist_list}; do
    local name="${GHBU_USERNAME}/gist/${gist:0:8}"
    $GHBU_QUIET || echo "Backup gist '${name}'..."
    $GHBU_DRY_RUN || archive_git "${gist_clone_url}${gist}.git" "${name////-}-${TIMESTAMP}.git"
  done

  # Prune old backup files.
  if [[ $GHBU_PRUNE_OLD_DAYS != '0' ]]; then
    $GHBU_QUIET || echo "Pruning backup files older then ${GHBU_PRUNE_OLD_DAYS} day(s)..."
    # shellcheck disable=SC2089
    local find_arg="${GHBU_BACKUP_DIR} -name '*.tar.gz' -mtime +${GHBU_PRUNE_OLD_DAYS}"
    # shellcheck disable=SC2086
    # shellcheck disable=SC2090
    $GHBU_QUIET || echo "Found $(find ${find_arg} 2>/dev/null | wc -l) old file(s)."
    $GHBU_QUIET || echo 'Deleting files (if any)...'
    # shellcheck disable=SC2086
    # shellcheck disable=SC2090
    $GHBU_DRY_RUN || find ${find_arg} -exec rm -fv {} >/dev/null \;
  fi

  $GHBU_QUIET || echo 'Done. GitHub backup completed.'
}

main "$@"
