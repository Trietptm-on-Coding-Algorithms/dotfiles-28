#!/usr/bin/env bash
#
# The main script of dotfiles.

# NOTE: If you want to fork this repository and maintain your own dotfiles, you
# must substitute the following user name and repository name for your own.
DOTFILES_GITHUB_USER="${DOTFILES_GITHUB_USER:-jmlntw}"
DOTFILES_GITHUB_REPO="${DOTFILES_GITHUB_REPO:-dotfiles}"

DOTFILES_REPO_URL="${DOTFILES_REPO_URL:-https://github.com/$DOTFILES_GITHUB_USER/$DOTFILES_GITHUB_REPO}"
DOTFILES_TARBALL_URL="${DOTFILES_TARBALL_URL:-$DOTFILES_REPO_URL/tarball/master}"
DOTFILES_GIT_URL="${DOTFILES_GIT_URL:-$DOTFILES_REPO_URL.git}"

DOTFILES_PATH="${DOTFILES_PATH:-$HOME/.dotfiles}"

########################################
# Prints dotfiles logo.
########################################
e_logo() {
cat << "EOF"
      _       _    __ _ _
   __| | ___ | |_ / _(_) | ___  ___
  / _` |/ _ \| __| |_| | |/ _ \/ __|
 | (_| | (_) | |_|  _| | |  __/\__ \
  \__,_|\___/ \__|_| |_|_|\___||___/
EOF
cat <<EOT

Copyright (c) 2015-2016 Jimmy Lin
Licensed under the MIT License

Remote dotfiles: $DOTFILES_REPO_URL
Local dotfiles:  $DOTFILES_PATH

EOT
}

########################################
# Prints a text message.
########################################
e_normal() {
  printf "\033[0m%s\033[0m\n" "$*"
}

########################################
# Tests whether a command is exists.
########################################
is_exists() {
  which "$1" >/dev/null 2>&1
  return $?
}

# Download dotfiles from the remote repository.
if [ ! -d "$DOTFILES_PATH" ]; then
  e_normal "Downloading dotfiles from remote repository..."

  if is_exists "git"; then
    git clone --recursive "$DOTFILES_REPO_URL" "$DOTFILES_PATH"
  elif is_exists "curl" || is_exists "wget"; then
    if is_exists "curl"; then
      curl -fsSLO "$HOME/dotfiles.tar.gz" "$DOTFILES_TARBALL_URL"
    elif is_exists "wget"; then
      wget -qO "$HOME/dotfiles.tar.gz" "$DOTFILES_TAR_BALL_URL"
    fi
    tar -zxf "$HOME/dotfiles.tar.gz" --strip-components 1 -C "$DOTFILES_PATH"
    rm -rf "$HOME/dotfiles.tar.gz"
  else
    e_normal "Error: Requires either git, curl or wget."
    exit 1
  fi
fi

cd "$DOTFILES_PATH"

source ./lib/utils
source ./lib/help
source ./lib/list
source ./lib/deploy
source ./lib/init
source ./lib/update
source ./lib/clean
source ./lib/test

# Print help message if "help" command is specified.
if [ "$1" == "help" ]; then
  e_help
  exit 0
fi

e_logo

# Test all known commands.
case "$1" in
  list)
    list_dotfiles
    ;;
  deploy)
    deploy_dotfiles
    ;;
  init)
    init_dotfiles
    ;;
  update)
    update_dotfiles
    ;;
  install)
    update_dotfiles &&
    init_dotfiles &&
    deploy_dotfiles
    ;;
  clean)
    clean_dotfiles
    ;;
  test)
    test_dotfiles
    ;;
  *)
    # $ bash dotfiles
    if [ "$0" = "${BASH_SOURCE:-}" ]; then
      e_help
      exit
    fi
    # $ cat dotfiles | bash
    # $ bash -c "$(cat dotfiles)"
    if [ -n "${BASH_EXECUTION_STRING:-}" ] || [ -p /dev/stdin ]; then
      update_dotfiles &&
      init_dotfiles &&
      deploy_dotfiles

      # Restart shell if using "bash -c $(curl -L {URL})"
      if [ -p /dev/stdin ]; then
        e_warning "Now continue with rebooting your shell"
      else
        e_newline
        e_arrow "Restarting your shell..."
        exec "${SHELL:-/bin/bash}"
      fi
    fi
    ;;
esac
