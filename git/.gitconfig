[alias]
  # Add
  a = add                           # Add
  chunkyadd = add --patch           # Stage commits chunk by chunk

  # Branch
  b = branch -v                     # Show branches (verbose)
  nb = checkout -b                  # Create and switch to a new branch

  # Commit
  c = commit                        # Commit
  ca = commit -a                    # Commit with automatically staging changed files
  cm = commit -m                    # Commit with message
  cam = commit -am                  # Commit all changed files with message
  amend = commit -amend             # Amend last commit

  # Checkout
  co = checkout                     # Checkout

  # Cherry-pick
  cp = cherry-pick -x               # Grab a change from a branch

  # Diff
  d = diff                          # Diff unstaged changes
  dc = diff --cached                # Diff staged changes
  last = diff ^HEAD                 # Diff last committed changes

  # Log
  graph = log --graph --decorate --oneline
  oneline = log --oneline
  simple = log --pretty=format:' * %s'
  authors = !git log --pretty=format:'%aN <%aE>' | sort | uniq
  who = shortlog --numbered --summary --email --no-merges
  count = rev-list HEAD --count
  countall = rev-list --all --count

  # Pull
  pl = pull                         # Pull

  # Push
  ps = push                         # Push

  # Rebase
  rc = rebase --continue            # Continue rebase
  rs = rebase --skip                # Skip rebase

  # Remote
  r = remote -v                     # Show remotes (verbose)

  # Reset
  unstage = reset HEAD              # Remove files from index (tracking)
  uncommit = reset --soft HEAD^     # Go back before last commit with file in uncommitted state

  # Stash
  ss = stash                        # Stash changes
  sl = stash list                   # List stashes
  sa = stash apply                  # Apply stashes (restore changes)
  sd = stash drop                   # Drop stashes (destory changes)

  # Snapshot
  # via http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
  snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
  snapshots = !git stash list --grep snapshot

  # Status
  s = status -s                     # Status
  st = status -s                    # Status

  # Size
  size = git count-objects -vH      # Find reopsitory size

  # Tag
  t = tag -n                        # Show tags with <n> lines of each tag message

  # Clean
  trim = !git remote prune origin && git gc
  cleanup = !git clean -df && git stash clear

  # Fetch and checkout a GitHub pull request from a remote (defaults to `origin`)
  # Usage: `git gh-pr 123` or `git gh-pr 123 upstream`
  gh-pr = !bash -c 'git fetch -fu ${2:-origin} refs/pull/$1/head:gh-pr/$1 && git checkout gh-pr/$1' -

[color]
  ui = auto

[core]
  autocrlf = input
  excludesfile = ~/.gitignore
  attributesfile = ~/.gitattributes

[merge]
  ff = false

[pull]
  rebase = preserve

[include]
  path = ~/.gitconfig.local

[url "git@github.com:"]
  pushInsteadOf = git://github.com/
  pushInsteadOf = https://github.com/

[url "git@gist.github.com:"]
  pushInsteadOf = git://gist.github.com/
  pushInsteadOf = https://gist.github.com/
